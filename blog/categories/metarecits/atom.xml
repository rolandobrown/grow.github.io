<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Metarecits | /grow|with|love/]]></title>
  <link href="http://rolandobrown.github.io/blog/categories/metarecits/atom.xml" rel="self"/>
  <link href="http://rolandobrown.github.io/"/>
  <updated>2015-08-27T00:27:05-04:00</updated>
  <id>http://rolandobrown.github.io/</id>
  <author>
    <name><![CDATA[Rolando Brown aka Grow]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NESTED FORMS]]></title>
    <link href="http://rolandobrown.github.io/blog/2015/08/26/nested-forms/"/>
    <updated>2015-08-26T23:01:50-04:00</updated>
    <id>http://rolandobrown.github.io/blog/2015/08/26/nested-forms</id>
    <content type="html"><![CDATA[<blockquote><p>An introduction to this series is <a href="http://rolandobrown.github.io/blog/2015/08/26/meta-recits/">here</a>.</p></blockquote>

<h1>Audible:</h1>

<iframe width="100%" height="20" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/221084854&amp;color=ff5500&amp;inverse=false&amp;auto_play=false&amp;show_user=true"></iframe>




<iframe width="100%" height="20" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/164655589&amp;color=ff5500&amp;inverse=false&amp;auto_play=false&amp;show_user=true"></iframe>


<h1>Story:</h1>

<p>It was Wednesday, a hump day. Not exactly a REST day.</p>

<p><div><script src='https://gist.github.com/66443ac017eb4980cfb7.js'></script>
<noscript><pre><code># Ruby and I
$ cat hump_day.rb
# needs_expressed? = true
</code></pre></noscript></div>
</p>

<p>Still, we were both done with the everyday routine of adhering to expectation syntax. Maybe too many expectations. Maybe too many failed examples from methods that took too damn long to load. Maybe boredom. Who knows. I don&rsquo;t. I just recall that we both commented craving a new form.</p>

<p><div><script src='https://gist.github.com/d7b1d1dfad134ab79dc5.js'></script>
<noscript><pre><code># config.ru
require &#39;./config/environment&#39;
  if defined?(ActiveRecord::Migrator) &amp;&amp; ActiveRecord::Migrator.needs_migration?
    raise &#39;Migrations pending run `rake db:migrate` to resolve the issue.&#39;
  end

use FormController
use RequestSpecificationController
run TravelController</code></pre></noscript></div>
</p>

<p>Instead of jetting back to the lab per usual, we decided to return to that RecursiveOpenStruct my friend Bundler managed to keep track of. I&rsquo;d forgotten all about that place, but Bundler remembered where it was and how to find it. He was like that, always helping me out by doing things a little outside of his everyday scope. A lot of people helped him out in the early days of his loving, so he&rsquo;s inherited a bit of attributes from the Giving class. Plus, he&rsquo;s developed some kind of dependency sixth sense and appreciates that I&rsquo;m almost always looking to build something new and useful. It was a co-dependent relationship that worked for the both us. So, I made a call. And he responded:</p>

<blockquote><p>&ldquo;Anything for Ruby.&rdquo;</p></blockquote>

<p><div><script src='https://gist.github.com/bdc016bb38431667a476.js'></script>
<noscript><pre><code>$ cat run_file.rb
# route_found? = true

$ bundle
# Fetching gem metadata from https://rubygems.org/.........
# Using sinatra 1.4.6
# Bundle complete! 1 Gemfile dependencies, 35 gems now installed.
# Use `bundle show [gemname]` to see where a bundled gem is installed.

$ cat recursive_open_struct.rb
# ...
# ros = RecursiveOpenStruct.new( { :fav =&gt; { :nesting_place =&gt; &#39;RecursiveOpenStruct&#39; } } )
# ros.fav.nesting_place

$ open https://play.spotify.com/track/1qWLqI629DQmVAcfxWV8ZZ
# The Way You Look Tonight...</code></pre></noscript></div>
</p>

<p>Each arrival began with a song: a listening that helped us both traverse. I chose a DSL. I think it was Sinatra 1.4.6. It must have been. Sinatra always helped to quickly created the perfect environment. It was as if that song was written specifically for this purpose: minimal effort, maximum return. Ruby appreciated that about me. She would get gitty every time I found it—that perfect beat. During those times she would send me a message. Something like: .send(&ldquo;you always find the right gem.&rdquo;). I would always respond with the same statement twice in a row:</p>

<blockquote><blockquote><blockquote><p>&ldquo;I&rsquo;ve benefited from remembering good friends and good songs.&rdquo;
&ldquo;I&rsquo;ve benefited from remembering good friends and good songs.&rdquo;</p></blockquote></blockquote></blockquote>

<p><div><script src='https://gist.github.com/60ca0b30c96dfd5f36ec.js'></script>
<noscript><pre><code>$ cat respond.rb
# 2.times my_response
# my_response = &quot;I&#39;ve benefited from remembering good friends and good songs.&quot;
# put &quot;Sinatra installed!&quot;</code></pre></noscript></div>
</p>

<p>Mid listen, <a href="http://www.sinatrarb.com/">Sinatra</a> on shotgun and ActiveRecord ready for use, I put my hand in my pocket, habitually wanting to get my phone and take a photo. Instead, I sat down on the table and just watched her dance a while. I remembered that I didn&rsquo;t need to do anything but see this. I just needed to rake watch for as long as she would have me. I didn&rsquo;t really need to capture every good memory of this arrival, or anything that would follow.</p>

<p>More importantly, neither of us could ever return to these moments anyway:</p>

<ul>
<li>the first time she would glide by my hand;</li>
<li>the initial touch;</li>
<li>the inhale of the new table smell—forever transformed by our primitive obsession—and our collective choice not to fix it.</li>
</ul>


<p>She reminded me:</p>

<blockquote><p>This doesn&rsquo;t need to persist in memory. It is enough to just be here: in these moments with each other.</p></blockquote>

<p><div><script src='https://gist.github.com/43bb2da34f3e451d32e8.js'></script>
<noscript><pre><code># When he goes for the phone...
$ cat ruby_knows.rb
# him.send(&quot;we&#39;re not here to store anything. We&#39;re here to enjoy.each {|other| ... }&quot;)</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meta Récits]]></title>
    <link href="http://rolandobrown.github.io/blog/2015/08/26/meta-recits/"/>
    <updated>2015-08-26T23:00:30-04:00</updated>
    <id>http://rolandobrown.github.io/blog/2015/08/26/meta-recits</id>
    <content type="html"><![CDATA[<iframe src="//giphy.com/embed/yx1Tzv0P6xTji" width="480" height="360" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>


<p><a href="http://giphy.com/gifs/demon-short-stories-scary-story-yx1Tzv0P6xTji">via GIPHY</a></p>


<p>Below is a link to the first of a series of short stories named #MetaRécits.</p>

<p>I&rsquo;m a software engineer: a programmer.
A new one, who&rsquo;s currently building very simple programs, but a programmer nonetheless.
I&rsquo;m also an Artist: a poet, and author of songs with accompanying short stories.
I have a few other roles, father, community organizer, etc. But we won&rsquo;t get into all of those right now.</p>

<p>This post is about short stories inspired by programming.</p>

<p>I&rsquo;m in week 5 of a web development intensive at Flatiron School. Throughout the five weeks, I have found myself imagining these short stories inspired by my time here. These stories have helped to channel the enthusiasm, pride, anger, frustration, and longing I&rsquo;ve experienced while learning to program using a set of tools called &ldquo;The Full Stack.&rdquo;</p>

<p>In other words, these short stories have been welcomed respite from hours of noob frustration. They are the result of working to bridge the creative expressions in my code with the creative explorations of my imagination. They are evidence of some effort to map what&rsquo;s happening to my worldview as a result of learning programming languages.</p>

<p>I enjoy imagining programming language syntax, programming concepts, and tools as objects with relationships in everyday sentient life. I&rsquo;ve begun to think of this as an artistic practice, maybe some early form of what will later grow into more structured metaprogramming. For now, let&rsquo;s just call it an artistic practice.</p>

<p>In some instances this practice has been helpful in internalizing keywords like Self or This, Ruby methods like Collect, design patterns like ActiveRecord and development frameworks like RSpec. In other instances, it&rsquo;s created unintended distractions and exponential levels of complexity. Honestly, these layers of complexity have at times been difficult to crawl out of. Thank the programming Gods for great people willing to help me get out of programmer Hell.</p>

<p>To aspiring and existing software programmers reading this, my apologies in advance if you get a sniff of that code smell. If you see it in this series, please feel free to comment or refactor and send me a pull request. All of the stories are posted in a public Repo on Github. They are also works licensed under the Creative Commons Attribution 4.0 International License. So, feel free to contribute to the culture.</p>

<p>If you&rsquo;re not a software programmer, and you&rsquo;re unfamiliar with code smell, don&rsquo;t worry about it. I&rsquo;ve come to extend my definition of a &ldquo;programmer&rdquo; to anyone actively working to control or transform the operation of something. I respect programmers at many levels. I know a lot of social change agents, entrepreneurs, and cultural workers who engage in life hacking, system improvement and/or social engineering on a daily basis.</p>

<p>If you&rsquo;re one of them, I identify with and appreciate you. You might read these stories and feel as if I have bad grammar, use symbols in inappropriate places, take poetic license too liberally, or draw correlations that &ldquo;don&rsquo;t make no damn sense.&rdquo; That&rsquo;s cool. Feel free to comment or rewrite the stories and send me feedback.</p>

<p>MetaRécits will eventually be a group of short stories inspired by the code challenges, labs and projects I&rsquo;m working on.</p>

<p>Don&rsquo;t expect too much of these short stories.
There&rsquo;s not designed to pass every test, be syntactically or semantically correct.</p>

<p>At least not yet.</p>

<p>Here&rsquo;s my first. I&rsquo;ve named it &ldquo;NESTED FORMS.&rdquo;
It was inspired by a single line of text in one of the Flatiron Labs &ldquo;INTRODUCTORY NESTED FORMS.&rdquo;</p>

<blockquote><p>Note: YOU DO NOT NEED A DATABASE, we just need to keep track of the forms input long enough to display it, not persist it. I don&rsquo;t expect the pirate to be there the next time I come to his URL, but it&rsquo;d be cool if he was.</p></blockquote>

<p>This lab was designed to help programmers practice using nested forms in Sinatra.</p>

<p>It succeeded. I&rsquo;m familiar.
I&rsquo;m also inspired:</p>

<ul>
<li><a href="http://rolandobrown.github.io/blog/2015/08/26/nested-forms/">NESTED FORMS</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
