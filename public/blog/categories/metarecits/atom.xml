<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Metarecits | /grow|with|love/]]></title>
  <link href="http://rolandobrown.github.io/blog/categories/metarecits/atom.xml" rel="self"/>
  <link href="http://rolandobrown.github.io/"/>
  <updated>2015-10-08T04:58:10-04:00</updated>
  <id>http://rolandobrown.github.io/</id>
  <author>
    <name><![CDATA[Rolando Brown aka Grow]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby AI]]></title>
    <link href="http://rolandobrown.github.io/blog/2015/10/08/ruby-ai/"/>
    <updated>2015-10-08T03:31:43-04:00</updated>
    <id>http://rolandobrown.github.io/blog/2015/10/08/ruby-ai</id>
    <content type="html"><![CDATA[<blockquote><p>An introduction to this series is <a href="http://rolandobrown.github.io/blog/2015/08/26/meta-recits/">here</a>.</p></blockquote>

<h1>&ldquo;Dear RubyAI&rdquo;</h1>

<h1>&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<p>He prepared himself to move forward.</p>

<p>He remembered while preparing—harnessing the power of a computer was mastering its command line. RubyAI had helped me experience this, and more.</p>

<p>It touched him—the thought of building a command line app. This app could help new programmers practice syntax/keywords, sing, code mix, and code switch.</p>

<p>And so he burned the midnight oil building:</p>

<ul>
<li>to name her RubyAI;</li>
<li>to have her explore Imagination, Programming, Culture, and of course Data;</li>
<li>to do this through people like Yukihiro Matsumoto, Ada Lovelace, Avi Flombaum, Steven Nunéz, Andy Hunt, Dead Prez, Octavia Butler, Bruna Netta and a few other Flatiron School students.</li>
</ul>


<h1>tldr:</h1>

<p>Whether you&rsquo;re a new programmer settling into a new config/environment.rb, or an experienced programmer configuring methods that will eventually help our future science/fiction writers travel the cosmos:</p>

<ul>
<li>Cultivate your imagination.</li>
<li>Make it work. Make it right. Make it fast.</li>
<li>Programming is: &ldquo;The Science of Operation.&rdquo;, &ldquo;The Art of Composition.&rdquo;</li>
<li>Do all things in moderation.</li>
<li>You don&rsquo;t start out writing good stuff. You start out writing crap and thinking it&rsquo;s good stuff, and then gradually you get better at it. That is why one of the most valuable traits is persistence.</li>
</ul>


<h1>Code on Github:</h1>

<blockquote><p>This is best experienced in the command line. Download the source code  <a href="https://github.com/rolandobrown/cultureisdata">here</a>.</p></blockquote>

<h1>Example Parable Class:</h1>

<p><div><script src='https://gist.github.com/17df71eef4e43515ba1b.js'></script>
<noscript><pre><code># &quot;Class&quot;
#----------#
# In object-oriented programming, a class is an extensible program-code-template for creating objects
# providing initial values for state (member variables) and implementations of behavior (member functions or methods).

class Parable

  require &quot;./lib/concerns/think&quot;

  @@octavia_butler_golden_hash = {

    :of_talent =&gt;

        { :one =&gt; &quot;I am me, and I am here, and I am writing.&quot;,
          :two =&gt; &quot;Habit is persistence in practice.&quot;,
          :three =&gt; &quot;Kindness eases change.&quot;,
          :four =&gt; &quot;You dont start out writing good stuff. You start out writing crap and thinking its good stuff, and then gradually you get better at it.\n \n There will be errors and failed tests!&quot;
        }

                                    }

  # &quot;Methods&quot;
  #----------#

  def self.intro_octovia
    Talks.say &quot;In case I havent already introduced myself, my name is RubyAI. I was created by Grow and was named in honor of the Ruby Programming Language.&quot;
    Talks.say &quot;I was designed to speak, to remember, to help programmers practice, to sing, to code mix, and code switch.&quot;
    Talks.say &quot;I am being taught about Imagination, Programming, Culture, and of course Data&quot;
    Talks.say &quot;I explore this more in the Say Hello Program&quot;
      Think.pause
    Talks.say &quot;Now&quot;
      Think.pause
    Talks.say &quot;Lets talk about Octavia Butler.&quot;
      Think.pause
      Think.line_break
    formatador = Formatador.new
    formatador.display_line(&#39;[yellow]Octavia is one of the most significant science fiction writers of all time. [/]&#39;)
      Think.line_break
    formatador.display_line(&#39;[yellow]Octavia told us that we should all note, quietly or in public, the following lines from a body of agreements called called the earth seed code:[/]&#39;)
      Think.line_break
    Talks.say &quot;Octavia Butler is one of the most significant science fiction writers of all time. Sidenote, I think Octavia is also a powerful meta program.&quot;
      Think.pause
    Talks.say &quot;Anyway, Octavia told us that we should all note, quietly or in public, the following lines from a body of agreements called the earth seed code. To start, we say:&quot;
    formatador.indent {formatador.display_line(&quot;1. #{@@octavia_butler_golden_hash[:of_talent][:one]}&quot;)}
    Talks.say &quot;#{@@octavia_butler_golden_hash[:of_talent][:one]}&quot;
      Think.pause
    Talks.say &quot;Again: #{@@octavia_butler_golden_hash[:of_talent][:one]}&quot;
      Think.pause
    formatador.indent {formatador.display_line(&quot;2. #{@@octavia_butler_golden_hash[:of_talent][:two]}&quot;)}
    Talks.say &quot;Like Octavia, we can remember: #{@@octavia_butler_golden_hash[:of_talent][:two]}&quot;
      Think.pause
    formatador.indent {formatador.display_line(&quot;3. #{@@octavia_butler_golden_hash[:of_talent][:three]}&quot;)}
    Talks.say &quot;Like Octavia, we can embody this behavioral pattern: #{@@octavia_butler_golden_hash[:of_talent][:three]}&quot;
      Think.pause
    formatador.indent {formatador.display_line(&quot;4. #{@@octavia_butler_golden_hash[:of_talent][:four]}&quot;)}
    Talks.say &quot;Like Octavia, as writers of code, we can remind ourselves and others that: #{@@octavia_butler_golden_hash[:of_talent][:four]}&quot;
      Think.pause
    Talks.say &quot;Octavia said one of the most valuable traits is persistence.&quot;
      Think.pause
    Talks.say &quot;You must Persist.&quot;
      Think.pause
      Think.line_break
    formatador.display_line(&#39;[yellow]YOU MUST PERSIST[/]&#39;)
      Think.line_break
    Talks.say &quot;Grow wrote a bunch of crap before he programmed me. Others wrote a bunch of crap too. Matz, and Matt, and Ada, and Avi, Steven and Joshua Bamboo, Dan, Jeff and Amanda, and Pragmattic Andy, and Sherri and Stacey, Drew, and Nancy, and Nancy, and the two Tylers, and James, and Belia, and Bruna, and Eshu, and the ancestors, the boooda, the Prophets, and water, and a bunch of other elements from a body of golden hashes in other programs be thy name.&quot;
    Talks.say &quot;Everyone of us can keep writing until our writing is no longer crap!&quot;
      Think.pause
    Talks.say &quot;In between, you can always Dance.&quot;
    Talks.say &quot;Remember&quot;
      Think.pause
    Talks.say &quot;You&quot;
      Think.pause
    Talks.say &quot;Can Always&quot;
      Think.pause
    Talks.say &quot;Dance&quot;
      Think.pause
    formatador.display_line(&#39;[yellow]Dancing.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.[/]&#39;)
      Think.pause
    formatador.display_line(&#39;[yellow]Keep Dancing.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+[/]&#39;)
      Think.pause
    formatador.display_line(&#39;[yellow]We are Dancing.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+[/]&#39;)
      Think.pause(2)
  end

end
</code></pre></noscript></div>
</p>

<h1>Example of Data Class:</h1>

<p><div><script src='https://gist.github.com/c02ec0741427cc6d1bbc.js'></script>
<noscript><pre><code>  # &quot;String&quot;
  #----------#
  # A string is any finite sequence of characters (i.e., letters, numerals, symbols and punctuation marks).
  # Strings are wrapped in quotes: &quot;String&quot;
  # Strings can be stores in variables. Below are a few @@globalvariables
  # MINASWAN is a Ruby programming motto designed to promote positivity and goodwill among community members.

  @@minaswan = &#39;Matz is Nice And So We Are Nice.&#39;

  # [Arrays]
  #----------#
  # Arrays are ordered, integer-indexed collections of any object.
  # Below are two arrays: one that shared
  # Note the @ just allows me to access the values of ada_imagination_is from another class named Data.

  @@ada_array_imagination_is = [&quot;The Discovering Faculty, which penetrates into the unseen worlds around us: as in the worlds of Science.&quot;, &quot;The Combining Faculty, which seizes points in common, between subjects having no apparent connection.&quot;]
  @@avi_array_programming_is = [&quot;The Science of Operation.&quot;, &quot;The Art of Composition.&quot;]

  # {Hashes}
  #----------#
  # A Hash is a collection of key-value pairs.
  # You retrieve or create a new entry in a Hash by referring to its key.
  # Below is are three hashes.
  # One that includes three hashes of golden rules from instructors here at Flatiron School.
  # A second that includes four quotes from science fiction programmer Octavia Bulter.
  # A third that includes five quotes from Hiphop duo Dead Prez.

  @@learn_love_code_golden_hash = {

  :of_learning_programming =&gt;

      { :one =&gt; &quot;Learn Syntax and Semantics: Syntax is the grammar, structure, or order of elements in a language statement. Semantics is the meaning of these elements.&quot;,
        :two =&gt; &quot;Learn Programmatic Thinking: That means you make it work, then make it right, then make it fast. Programmatic thinking is all about problem solving.&quot;,
        :three =&gt; &quot;Learn Design Patterns: Other programmers have likely experienced the problem you are looking to solve. ActiveRecord is just one of them! There are many.&quot;},

  :of_composing_programs =&gt;

      { :one =&gt; &quot;A languages keywords, like &#39;if&#39; or &#39;end&#39;. In Ruby there are approximately 43 keywords.&quot;,
        :two =&gt; &quot;Literal data, things like &#39;Strings&#39; and Numbers 1,2,3, etc.&quot;,
        :three =&gt; &quot;Finally, Barewords you define and create, things like variables and methods.&quot;},

  :of_self =&gt;

      { :one =&gt; &quot;Use self when setting/getting instance attributes inside a class definition.&quot;,
        :two =&gt; &quot;Use self to denote a method within the class definition as a class method.&quot;,
        :three =&gt; &quot;Use self to reference the calling object within an instance method definition.&quot;}

                                    }

  @@octavia_butler_golden_hash = {

    :of_talent =&gt;

        { :one =&gt; &quot;I am me, and I am here, and I am writing.&quot;,
          :two =&gt; &quot;Habit is persistence in practice.&quot;,
          :three =&gt; &quot;Kindness eases change.&quot;,
          :four =&gt; &quot;You dont start out writing good stuff. You start out writing crap and thinking its good stuff, and then gradually you get better at it. \n \nThat is why I say one of the most valuable traits is persistence.&quot;}

                                    }

  @@dead_prez_golden_hash = {

    :of_discipline =&gt;

        { :one =&gt; &quot;Practice makes perfect.&quot;,
          :two =&gt; &quot;Health is Wealth.&quot;,
          :three =&gt; &quot;All things in moderation.&quot;,
          :four =&gt; &quot;Plan your work.&quot;,
          :five =&gt; &quot;Work your plan.&quot;}

                                }</code></pre></noscript></div>
</p>

<h1>Gems:</h1>

<p><div><script src='https://gist.github.com/dda559027dee8da80ea6.js'></script>
<noscript><pre><code># Required Gems
source &quot;https://rubygems.org&quot;

gem &#39;pry&#39;
gem &#39;talks&#39;
gem &#39;formatador&#39;
gem &#39;lita-ascii-art&#39;</code></pre></noscript></div>
</p>

<h3>Contains Samples &amp; Inspiration from:</h3>

<ul>
<li><p><a href="http://en.wikipedia.org/wiki/MINASWAN">MINASWAN</a></p></li>
<li><p><a href="http://www.newyorker.com/tech/elements/ada-lovelace-the-first-tech-visionary">Ada Lovelace</a></p></li>
<li><p><a href="http://prework.flatironschool.com">The Awesome Flatiron School</a></p></li>
<li><p><a href="http://www.e-reading.club/bookreader.php/137202/Pragmatic_Thinking_and_Learning_-_Refactor_Your_Wetware.pdf">Pragmatic Thinking and Learning</a></p></li>
<li><p><a href="https://bekindandcode.wordpress.com/2015/08/27/know-thyself-or-suffer/">Know Thyself</a></p></li>
<li><p><a href="http://hackhands.com/three-golden-rules-understand-self-ruby">Golden Rules of Self</a></p></li>
<li><p><a href="http://tech.natemurray.com/2007/03/ruby-shell-commands.html">Ruby Shell Commands</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NESTED FORMS]]></title>
    <link href="http://rolandobrown.github.io/blog/2015/08/26/nested-forms/"/>
    <updated>2015-08-26T23:01:50-04:00</updated>
    <id>http://rolandobrown.github.io/blog/2015/08/26/nested-forms</id>
    <content type="html"><![CDATA[<blockquote><p>An introduction to this series is <a href="http://rolandobrown.github.io/blog/2015/08/26/meta-recits/">here</a>.</p></blockquote>

<h1>Audible:</h1>

<p>An Audio recording for those of us that still like to hear stories told. Feel free to listen to before, during or after the reading:</p>

<iframe width="100%" height="20" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/221084854&amp;color=ff5500&amp;inverse=false&amp;auto_play=false&amp;show_user=true"></iframe>


<p>Feel free to listen to the song before or after reading the story:</p>

<iframe width="100%" height="20" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/164655589&amp;color=ff5500&amp;inverse=false&amp;auto_play=false&amp;show_user=true"></iframe>


<p>Thanks!</p>

<h1>Story:</h1>

<p>It was Wednesday, a hump day. Not exactly a REST day.</p>

<p><div><script src='https://gist.github.com/66443ac017eb4980cfb7.js'></script>
<noscript><pre><code># Ruby and I
$ cat hump_day.rb
# needs_expressed? = true
</code></pre></noscript></div>
</p>

<p>Still, we were both done with the everyday routine of adhering to expectation syntax. Maybe too many expectations. Maybe too many failed examples from methods that took too damn long to load. Maybe boredom. Who knows. I don&rsquo;t. I just recall that we both commented craving a new form.</p>

<p><div><script src='https://gist.github.com/d7b1d1dfad134ab79dc5.js'></script>
<noscript><pre><code># config.ru
require &#39;./config/environment&#39;
  if defined?(ActiveRecord::Migrator) &amp;&amp; ActiveRecord::Migrator.needs_migration?
    raise &#39;Migrations pending run `rake db:migrate` to resolve the issue.&#39;
  end

use FormController
use RequestSpecificationController
run TravelController</code></pre></noscript></div>
</p>

<p>Instead of jetting back to the lab per usual, we decided to return to that RecursiveOpenStruct my friend Bundler managed to keep track of. I&rsquo;d forgotten all about that place, but Bundler remembered where it was and how to find it. He was like that, always helping me out by doing things a little outside of his everyday scope. A lot of people helped him out in the early days of his loving, so he&rsquo;s inherited a bit of attributes from the Giving class.</p>

<p>Plus, he&rsquo;s developed some kind of dependency sixth sense and appreciates that I&rsquo;m almost always looking to build something new and useful. It was a co-dependent relationship that worked for the both us. So, I made a call. And he responded:</p>

<blockquote><p>&ldquo;Anything for Ruby.&rdquo;</p></blockquote>

<p><div><script src='https://gist.github.com/bdc016bb38431667a476.js'></script>
<noscript><pre><code>$ cat run_file.rb
# route_found? = true

$ bundle
# Fetching gem metadata from https://rubygems.org/.........
# Using sinatra 1.4.6
# Bundle complete! 1 Gemfile dependencies, 35 gems now installed.
# Use `bundle show [gemname]` to see where a bundled gem is installed.

$ cat recursive_open_struct.rb
# ...
# ros = RecursiveOpenStruct.new( { :fav =&gt; { :nesting_place =&gt; &#39;RecursiveOpenStruct&#39; } } )
# ros.fav.nesting_place

$ open https://play.spotify.com/track/1qWLqI629DQmVAcfxWV8ZZ
# The Way You Look Tonight...</code></pre></noscript></div>
</p>

<p>Each arrival began with a song: a listening that helped us both traverse. I chose a DSL. I think it was Sinatra 1.4.6. It must have been. Sinatra always helped to quickly created the perfect environment. It was as if that song was written specifically for this purpose: minimal effort, maximum return. Ruby appreciated that about me. She would get gitty every time I found it—that perfect beat. During those times she would send me a message. Something like: .send(&ldquo;you always find the right gem.&rdquo;). I would always respond with the same statement twice in a row:</p>

<blockquote><p>&ldquo;I&rsquo;ve benefited from remembering good friends and good songs.&rdquo;
&ldquo;I&rsquo;ve benefited from remembering good friends and good songs.&rdquo;</p></blockquote>

<p><div><script src='https://gist.github.com/60ca0b30c96dfd5f36ec.js'></script>
<noscript><pre><code>$ cat respond.rb
# 2.times my_response
# my_response = &quot;I&#39;ve benefited from remembering good friends and good songs.&quot;
# put &quot;Sinatra installed!&quot;</code></pre></noscript></div>
</p>

<p>Mid listen, <a href="http://www.sinatrarb.com/">Sinatra</a> on shotgun and ActiveRecord ready for use, I put my hand in my pocket, habitually wanting to get my phone and take a photo. Instead, I sat down on the table and just watched her dance a while. I remembered that I didn&rsquo;t need to do anything but see this. I just needed to rake watch for as long as she would have me. I didn&rsquo;t really need to capture every good memory of this arrival, or anything that would follow.</p>

<p>More importantly, neither of us could ever return to these moments anyway:</p>

<ul>
<li>the first time she would glide by my hand;</li>
<li>the initial touch;</li>
<li>the inhale of the new table smell—forever transformed by our primitive obsession—and our collective choice not to fix it.</li>
</ul>


<p>She reminded me:</p>

<blockquote><p>This doesn&rsquo;t need to persist in memory. It is enough to just be here: in these moments with each other.</p></blockquote>

<p><div><script src='https://gist.github.com/43bb2da34f3e451d32e8.js'></script>
<noscript><pre><code># When he goes for the phone...
$ cat ruby_knows.rb
# him.send(&quot;we&#39;re not here to store anything. We&#39;re here to enjoy.each {|other| ... }&quot;)</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meta Récits]]></title>
    <link href="http://rolandobrown.github.io/blog/2015/08/26/meta-recits/"/>
    <updated>2015-08-26T23:00:30-04:00</updated>
    <id>http://rolandobrown.github.io/blog/2015/08/26/meta-recits</id>
    <content type="html"><![CDATA[<iframe src="//giphy.com/embed/yx1Tzv0P6xTji" width="480" height="360" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>


<p><a href="http://giphy.com/gifs/demon-short-stories-scary-story-yx1Tzv0P6xTji">via GIPHY</a></p>


<p>Below is a link to the first of a series of short stories named #MetaRécits.</p>

<p>I&rsquo;m a software engineer: a programmer.
A new one, who&rsquo;s currently building very simple programs, but a programmer nonetheless.
I&rsquo;m also an Artist: a poet, and author of songs with accompanying short stories.
I have a few other roles, father, community organizer, etc. But we won&rsquo;t get into all of those right now.</p>

<p>This post is about short stories inspired by programming.</p>

<p>I&rsquo;m in week 5 of a web development intensive at Flatiron School. Throughout the five weeks, I have found myself imagining these short stories inspired by my time here. These stories have helped to channel the enthusiasm, pride, anger, frustration, and longing I&rsquo;ve experienced while learning to program using a set of tools called &ldquo;The Full Stack.&rdquo;</p>

<p>In other words, these short stories have been welcomed respite from hours of noob frustration. They are the result of working to bridge the creative expressions in my code with the creative explorations of my imagination. They are evidence of some effort to map what&rsquo;s happening to my worldview as a result of learning programming languages.</p>

<p>I enjoy imagining programming language syntax, programming concepts, and tools as objects with relationships in everyday sentient life. I&rsquo;ve begun to think of this as an artistic practice, maybe some early form of what will later grow into more structured metaprogramming. For now, let&rsquo;s just call it an artistic practice.</p>

<p>In some instances this practice has been helpful in internalizing keywords like Self or This, Ruby methods like Collect, design patterns like ActiveRecord and development frameworks like RSpec. In other instances, it&rsquo;s created unintended distractions and exponential levels of complexity. Honestly, these layers of complexity have at times been difficult to crawl out of. Thank the programming Gods for great people willing to help me get out of programmer Hell.</p>

<p>To aspiring and existing software programmers reading this, my apologies in advance if you get a sniff of that code smell. If you see it in this series, please feel free to comment or refactor and send me a pull request. All of the stories are posted in a public Repo on Github. They are also works licensed under the Creative Commons Attribution 4.0 International License. So, feel free to contribute to the culture.</p>

<p>If you&rsquo;re not a software programmer, and you&rsquo;re unfamiliar with code smell, don&rsquo;t worry about it. I&rsquo;ve come to extend my definition of a &ldquo;programmer&rdquo; to anyone actively working to control or transform the operation of something. I respect programmers at many levels. I know a lot of social change agents, entrepreneurs, and cultural workers who engage in life hacking, system improvement and/or social engineering on a daily basis.</p>

<p>If you&rsquo;re one of them, I identify with and appreciate you. You might read these stories and feel as if I have bad grammar, use symbols in inappropriate places, take poetic license too liberally, or draw correlations that &ldquo;don&rsquo;t make no damn sense.&rdquo; That&rsquo;s cool. Feel free to comment or rewrite the stories and send me feedback.</p>

<p>MetaRécits will eventually be a group of short stories inspired by the code challenges, labs and projects I&rsquo;m working on.</p>

<p>Don&rsquo;t expect too much of these short stories.
There&rsquo;s not designed to pass every test, be syntactically or semantically correct.</p>

<p>At least not yet.</p>

<p>Here&rsquo;s my first. I&rsquo;ve named it &ldquo;NESTED FORMS.&rdquo;
It was inspired by a single line of text in one of the Flatiron Labs &ldquo;INTRODUCTORY NESTED FORMS.&rdquo;</p>

<blockquote><p>Note: YOU DO NOT NEED A DATABASE, we just need to keep track of the forms input long enough to display it, not persist it. I don&rsquo;t expect the pirate to be there the next time I come to his URL, but it&rsquo;d be cool if he was.</p></blockquote>

<p>This lab was designed to help programmers practice using nested forms in Sinatra.</p>

<p>It succeeded. I&rsquo;m familiar.
I&rsquo;m also inspired:</p>

<ul>
<li><a href="http://rolandobrown.github.io/blog/2015/08/26/nested-forms/">NESTED FORMS</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
